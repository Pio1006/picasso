#!/usr/bin/env node

const fs = require('fs-extra')
const path = require('path')
const chalk = require('chalk')
const yargs = require('yargs').argv
const rimraf = require('rimraf').sync
const exec = require('child_process').execSync

const config = require(`./build.${yargs.config}.config.js`)
const babelPath = path.resolve(__dirname, '../node_modules/.bin/babel')
const packageJson = require(path.resolve(__dirname, '../package.json'))


// General logging
const log = function(text, color) {
  if (!color) color = 'blue'
  console.log(chalk[color](text))
}

// Babel compiler
const babel = function(config) {
  log(`Building ${packageJson.name}:${packageJson.version}`)
  log(`Setting output to: ${yargs.config}`, 'green')

  const args = [
    `--config-file ${path.resolve(__dirname, '../babel.config.js')}`,
    `${config.sourceFiles}`,
    `--out-dir ${config.outDir}`,
    `--ignore ${config.ignoredFiles.join(',')}`
  ]

  function build() {
    const cmd = `${babelPath} ${args.join(' ')}`
    exec(cmd)
    log(`Build ready in: ${config.outDir}`, 'green')
  }

  function clean() {
    log(`Removing: ${config.outDir}`, 'green')
    rimraf(config.outDir)
  }


  // Firstly build with babel and run again with watch
  clean()
  build()

  if (yargs.config == 'dev') {
    generatePackageJson(config.outDir)
  }

  if (yargs.symlink) {
    log('Symlinking dev package...')
    try {
      exec('yarn unlink', {
        cwd: config.outDir,
        stdio: 'ignore',
        stderr: 'ignore'
      })
    } catch (e) {
      log(`Package ${packageJson.name} not found. Linking new...`)
    }

    exec('yarn link', {
      cwd: config.outDir,
      stdio: 'inherit'
    })
  }

  if (yargs.watch) {
    args.unshift('--watch')
    build()
    log(`Watching for changes in: ${config.sourceFiles}`)
  }
}

// Generate artifical package.json for linking
function generatePackageJson(outDir) {
  log(`Creating package.json in: ${outDir}`)
  fs.ensureDirSync(outDir)
  const out = path.resolve(outDir, './package.json')

  const data = {
    ...packageJson,
    main: './index.js',
    module: './index.js'
  }
  fs.writeFileSync(out, JSON.stringify(data, null, 2))
}

babel(config)
