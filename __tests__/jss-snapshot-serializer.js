/* global HTMLElement */

const MARKER = '__jss-snapshot-serializer-marker__'

const jssClassNameRegexp = /([a-zA-Z0-9]*)-([a-zA-Z0-9]*)-([0-9]*)/

const collectElements = (element, elements = []) => {
  if (typeof element !== 'object') {
    return elements
  }

  elements.push(element)

  if (element.children) {
    for (const child of element.children) {
      collectElements(child, elements)
    }
  }

  return elements
}

const markElements = nodes =>
  nodes.forEach(element => {
    element[MARKER] = true
  })

const replaceJssClassNames = elements => {
  elements.forEach(element => {
    if (!element.className) return

    // JSS generates the class names that follow this format:
    // {componentName}-{ruleName}-{jssCounter}
    // the non-deterministic part of it is "-{jssCounter}"
    // so we simply remove from the snapshots
    const classNameProp = element.className

    if (!classNameProp || typeof classNameProp !== 'string') return

    const deterministicClassNames = classNameProp
      .trim()
      .split(/\s+/)
      .map(className => {
        // do not modify the className if it is not generated by JSS
        if (!jssClassNameRegexp.test(className)) return className

        const lastDashPosition = className.lastIndexOf('-')
        const secondLastDashPosition = className.lastIndexOf(
          '-',
          lastDashPosition
        )

        return className.substring(0, secondLastDashPosition)
      })

    element.className = deterministicClassNames.join(' ')
  })
}

module.exports = {
  test (value) {
    // apply the serializer only to react elements that we haven't marked(processed) before
    return value && !value[MARKER] && value instanceof HTMLElement
  },

  print (value, serialize) {
    // collect all react element nodes in the tree of the value
    const elements = collectElements(value)

    // mark the collected element nodes to avoid processing them several times
    markElements(elements)

    // remove the non-deterministic part from the JSS class names
    // to keep the snapshots repeatable
    replaceJssClassNames(elements)

    return serialize(value)
  }
}
