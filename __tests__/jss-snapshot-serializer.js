/* global HTMLElement */

const MARKER = '__jss-snapshot-serializer-marker__'

// JSS generates the class names that follow this format:
// {componentName}-{ruleName}-{jssCounter}
// the non-deterministic part of it is "-{jssCounter}"
// https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/styles/createGenerateClassName.js
const jssClassNameRegexp = /([a-zA-Z0-9]*)-([a-zA-Z0-9]*)-([0-9]*)/

const flatElementsTree = (element, elements = []) => {
  if (typeof element !== 'object') {
    return elements
  }

  elements.push(element)

  if (element.children) {
    for (const child of element.children) {
      flatElementsTree(child, elements)
    }
  }

  return elements
}

const markElementsProcessed = nodes => {
  return nodes.forEach(element => {
    element[MARKER] = true
  })
}

const removeNonDeterministicClassParts = elements => {
  elements.forEach(element => {
    if (!element.className) return

    const classNameProp = element.className

    if (!classNameProp || typeof classNameProp !== 'string') return

    const deterministicClassNames = classNameProp
      .trim()
      .split(/\s+/)
      .map(className => {
        // do not modify the className if it is not generated by JSS
        if (!jssClassNameRegexp.test(className)) return className

        const lastDashPosition = className.lastIndexOf('-')
        const secondLastDashPosition = className.lastIndexOf(
          '-',
          lastDashPosition
        )

        return className.substring(0, secondLastDashPosition)
      })

    element.className = deterministicClassNames.join(' ')
  })
}

module.exports = {
  test (value) {
    const isNotProcessed = !value[MARKER]
    const isHTMLElement = value instanceof HTMLElement

    return value && isNotProcessed && isHTMLElement
  },

  print (value, serialize) {
    const elements = flatElementsTree(value)

    markElementsProcessed(elements)
    removeNonDeterministicClassParts(elements)
    return serialize(value)
  }
}
